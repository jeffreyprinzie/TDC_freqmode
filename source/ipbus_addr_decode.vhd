-- Address decode logic for ipbus fabric
--
-- This file has been AUTOGENERATED from the address table - do not hand edit
--
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
--
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;
use work.ipbus.all;

package ipbus_addr_decode is

  function ipbus_addr_sel(signal addr : in std_logic_vector(31 downto 0)) return integer;

end ipbus_addr_decode;

package body ipbus_addr_decode is

  function ipbus_addr_sel(signal addr : in std_logic_vector(31 downto 0)) return integer is
    variable sel : integer;
  begin
		if    std_match(addr, "---------------------000--------") then
			sel := 0; -- reg0 / base 00000000 / mask 00000000
		elsif std_match(addr, "---------------------001--------") then
			sel := 1; -- handshake1 / base 00000100 / mask 00000000
		elsif std_match(addr, "---------------------010--------") then
			sel := 2; -- hitcount1 / base 00000200 / mask 00000000
		elsif std_match(addr, "---------------------011--------") then
			sel := 3; -- handshake2 / base 00000300 / mask 00000000
		elsif std_match(addr, "---------------------100--------") then
			sel := 4; -- hitcount2 / base 00000400 / mask 00000000
		elsif std_match(addr, "---------------------101--------") then
			sel := 5; -- ram0 / base 00000500 / mask 000000ff
		elsif std_match(addr, "---------------------110--------") then
			sel := 6; -- ram1 / base 00000600 / mask 000000ff
		else
			sel := 99;
		end if;
		return sel;
	end ipbus_addr_sel;
 
end ipbus_addr_decode;